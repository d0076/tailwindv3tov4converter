# Tailwind CSS v3 to v4 Converter - Cursor Rules

## Project Context

This is a React TypeScript application that converts between Tailwind CSS v3 (HSL) and v4 (OKLCH) color formats for shadcn/ui components. The app is built with Vite, uses shadcn/ui components, and follows modern React patterns.

## Code Style & Standards

### TypeScript

- Use strict TypeScript with proper type annotations
- Prefer interfaces over types for object shapes
- Use proper generic constraints and utility types
- Export types and interfaces when they might be reused
- Use `const` assertions where appropriate

### React Patterns

- Use functional components with hooks
- Prefer `useState` and `useEffect` for state management
- Use proper dependency arrays in useEffect
- Implement proper cleanup in useEffect when needed
- Use React.memo() for performance optimization when appropriate

### Component Structure

- Keep components focused and single-responsibility
- Extract reusable logic into custom hooks
- Use proper prop types and default values
- Implement proper error boundaries where needed

### Styling

- Use Tailwind CSS classes for styling
- Follow shadcn/ui component patterns
- Use CSS variables for theming
- Prefer utility classes over custom CSS
- Maintain responsive design principles

## File Organization

### Directory Structure

```
src/
├── components/
│   └── ui/           # shadcn/ui components only
├── lib/
│   └── *.ts         # Utility functions and business logic
├── hooks/           # Custom React hooks (if needed)
├── types/           # TypeScript type definitions (if needed)
└── *.tsx           # Main application components
```

### Import Order

1. React and React-related imports
2. Third-party library imports
3. Internal component imports (shadcn/ui)
4. Internal utility imports
5. Type-only imports (with `type` keyword)
6. Relative imports

### Naming Conventions

- Components: PascalCase (e.g., `ConversionPanel`)
- Files: kebab-case for utilities, PascalCase for components
- Functions: camelCase
- Constants: SCREAMING_SNAKE_CASE
- CSS classes: follow Tailwind conventions

## Code Quality Rules

### Error Handling

- Always handle potential errors in async operations
- Use try-catch blocks for error-prone operations
- Provide meaningful error messages to users
- Log errors appropriately for debugging

### Performance

- Use debouncing for frequent operations (like input changes)
- Implement proper memoization where beneficial
- Avoid unnecessary re-renders
- Use lazy loading for heavy components if needed

### Accessibility

- Use semantic HTML elements
- Provide proper ARIA labels and roles
- Ensure keyboard navigation works
- Maintain proper color contrast ratios
- Use focus management appropriately

### Testing Considerations

- Write testable code with pure functions
- Separate business logic from UI components
- Use dependency injection where appropriate
- Mock external dependencies in tests

## Specific Project Rules

### Color Conversion

- Keep color conversion logic in `src/lib/converter.ts`
- Use proper mathematical formulas for color space conversion
- Handle edge cases and invalid inputs gracefully
- Provide detailed error messages for conversion failures

### CSS Parsing

- Use robust regex patterns for CSS parsing
- Handle various CSS formatting styles
- Preserve original formatting where possible
- Validate CSS syntax before processing

### UI Components

- Use only shadcn/ui components for consistency
- Follow shadcn/ui patterns for custom components
- Maintain consistent spacing and typography
- Use proper loading states and error displays

### State Management

- Keep state as local as possible
- Use proper state updates (immutable patterns)
- Implement proper state validation
- Use derived state where appropriate

## Code Examples

### Good TypeScript Usage

```typescript
interface ConversionResult {
  success: boolean;
  result: string;
  errors: string[];
}

const convertColor = (input: string): ConversionResult => {
  // Implementation
};
```

### Good React Hook Usage

```typescript
const useDebounce = <T>(value: T, delay: number): T => {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => clearTimeout(handler);
  }, [value, delay]);

  return debouncedValue;
};
```

### Good Error Handling

```typescript
const handleConversion = async () => {
  try {
    setIsLoading(true);
    const result = await convertColors(input);
    setResult(result);
  } catch (error) {
    setError(error instanceof Error ? error.message : "Conversion failed");
  } finally {
    setIsLoading(false);
  }
};
```

## Dependencies

### Core Dependencies

- React 19+ with TypeScript
- Vite for build tooling
- Tailwind CSS v4 for styling
- shadcn/ui for UI components
- Lucide React for icons

### Development Dependencies

- TypeScript for type checking
- ESLint for code linting
- Prettier for code formatting (if configured)

## Performance Guidelines

### Bundle Size

- Keep bundle size minimal
- Use tree shaking effectively
- Avoid unnecessary dependencies
- Use dynamic imports for large features

### Runtime Performance

- Debounce expensive operations
- Use React.memo for expensive components
- Implement proper key props for lists
- Avoid inline object/function creation in render

### Memory Management

- Clean up event listeners and timers
- Avoid memory leaks in useEffect
- Use proper dependency arrays
- Clean up subscriptions and intervals

## Security Considerations

### Input Validation

- Validate all user inputs
- Sanitize CSS input to prevent injection
- Handle malformed CSS gracefully
- Provide clear error messages for invalid input

### Client-Side Security

- Don't expose sensitive information in client code
- Use proper CORS settings if making external requests
- Validate data before processing
- Handle edge cases securely

## Maintenance Guidelines

### Documentation

- Keep README.md updated
- Document complex algorithms
- Use clear variable and function names
- Add comments for non-obvious code

### Version Control

- Use meaningful commit messages
- Keep commits focused and atomic
- Use proper branching strategy
- Tag releases appropriately

### Updates

- Keep dependencies updated
- Monitor for security vulnerabilities
- Test thoroughly after updates
- Maintain backward compatibility where possible

---

**Remember**: This is a developer tool focused on simplicity, accuracy, and great user experience. Every change should improve one of these aspects while maintaining code quality and performance.
